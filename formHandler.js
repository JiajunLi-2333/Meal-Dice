// Ë°®ÂçïÊèê‰∫§Â§ÑÁêÜ
class RecipeSubmission {
    constructor() {
        this.form = document.querySelector('.share-form');
        this.submitButton = document.querySelector('.share-button');
        this.apiBaseUrl = 'http://localhost:3001/api';
        this.init();
    }

    init() {
        if (this.form) {
            this.form.addEventListener('submit', this.handleSubmit.bind(this));
            console.log('üìù Form handler initialized');
            
            // ÊµãËØïÊúçÂä°Âô®ËøûÊé•
            this.testServerConnection();
        }
    }

    async testServerConnection() {
        try {
            console.log('üîå Testing server connection...');
            const response = await fetch(`${this.apiBaseUrl}/health`);
            if (response.ok) {
                const data = await response.json();
                console.log('‚úÖ Server connection successful:', data);
            } else {
                console.warn('‚ö†Ô∏è Server responded with error:', response.status);
            }
        } catch (error) {
            console.error('‚ùå Server connection failed:', error);
            this.showMessage('‚ö†Ô∏è Backend server is not running. Please start the server first.', 'warning');
        }
    }

    async handleSubmit(e) {
        e.preventDefault();
        
        console.log('üì§ Form submission started');
        
        // Ëé∑ÂèñË°®ÂçïÊï∞ÊçÆ
        const formData = new FormData();
        const nameInput = this.form.querySelector('.name-input');
        const ingredientsInput = this.form.querySelector('.ingredients-input');
        const stepsInput = this.form.querySelector('.steps-input');
        const cookingTimeInput = this.form.querySelector('.cooking-time-input');
        const imageInput = this.form.querySelector('#photo-upload');

        // È™åËØÅÂøÖÂ°´Â≠óÊÆµ
        if (!nameInput.value.trim() || !ingredientsInput.value.trim() || 
            !stepsInput.value.trim() || !cookingTimeInput.value.trim()) {
            this.showMessage('Please fill in all required fields!', 'error');
            return;
        }

        // Ê∑ªÂä†Êï∞ÊçÆÂà∞FormData
        formData.append('name', nameInput.value.trim());
        formData.append('ingredients', ingredientsInput.value.trim());
        formData.append('steps', stepsInput.value.trim());
        formData.append('cooking_time', cookingTimeInput.value.trim());
        
        // Â¶ÇÊûúÊúâÂõæÁâáÔºåÊ∑ªÂä†Âà∞FormData
        if (imageInput.files[0]) {
            formData.append('image', imageInput.files[0]);
            console.log('üì∑ Image file selected:', imageInput.files[0].name);
        }

        // ÊâìÂç∞Ë°®ÂçïÊï∞ÊçÆËøõË°åË∞ÉËØï
        console.log('üìã Form data to submit:');
        for (let [key, value] of formData.entries()) {
            console.log(`  ${key}:`, value);
        }

        // ÊòæÁ§∫Âä†ËΩΩÁä∂ÊÄÅ
        this.setLoadingState(true);

        try {
            console.log('üöÄ Sending request to:', `${this.apiBaseUrl}/recipes`);
            
            const response = await fetch(`${this.apiBaseUrl}/recipes`, {
                method: 'POST',
                body: formData,
                // ‰∏çËÆæÁΩÆContent-TypeÔºåËÆ©ÊµèËßàÂô®Ëá™Âä®ËÆæÁΩÆmultipart/form-data
            });

            console.log('üì• Response received:', response.status, response.statusText);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();
            console.log('‚úÖ Server response:', result);

            if (result.success) {
                this.showMessage('Recipe shared successfully! üéâ', 'success');
                this.resetForm();
            } else {
                this.showMessage(result.error || 'Failed to share recipe', 'error');
            }
        } catch (error) {
            console.error('‚ùå Error submitting recipe:', error);
            
            // Êõ¥ËØ¶ÁªÜÁöÑÈîôËØØ‰ø°ÊÅØ
            if (error.name === 'TypeError' && error.message.includes('fetch')) {
                this.showMessage('‚ùå Cannot connect to server. Please make sure the backend server is running on port 3001.', 'error');
            } else if (error.message.includes('HTTP error')) {
                this.showMessage(`‚ùå Server error: ${error.message}`, 'error');
            } else {
                this.showMessage('‚ùå Network error. Please try again.', 'error');
            }
        } finally {
            this.setLoadingState(false);
        }
    }

    setLoadingState(isLoading) {
        if (isLoading) {
            this.submitButton.disabled = true;
            this.submitButton.textContent = 'Sharing...';
            this.submitButton.style.opacity = '0.6';
        } else {
            this.submitButton.disabled = false;
            this.submitButton.textContent = 'Share';
            this.submitButton.style.opacity = '1';
        }
    }

    showMessage(message, type) {
        // ÁßªÈô§Â∑≤Â≠òÂú®ÁöÑÊ∂àÊÅØ
        const existingMessage = document.querySelector('.form-message');
        if (existingMessage) {
            existingMessage.remove();
        }

        // ÂàõÂª∫Êñ∞Ê∂àÊÅØ
        const messageDiv = document.createElement('div');
        messageDiv.className = `form-message ${type}`;
        messageDiv.textContent = message;

        // Ê†∑Âºè
        const colors = {
            success: '#10b981',
            error: '#ef4444',
            warning: '#f59e0b'
        };

        messageDiv.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 10000;
            animation: slideInRight 0.3s ease-out;
            max-width: 350px;
            word-wrap: break-word;
            background-color: ${colors[type] || colors.error};
        `;

        document.body.appendChild(messageDiv);

        // Ê†πÊçÆÊ∂àÊÅØÁ±ªÂûãËÆæÁΩÆËá™Âä®ÁßªÈô§Êó∂Èó¥
        const removeTime = type === 'warning' ? 5000 : 3000;
        
        setTimeout(() => {
            if (messageDiv.parentNode) {
                messageDiv.style.animation = 'slideOutRight 0.3s ease-in';
                setTimeout(() => messageDiv.remove(), 300);
            }
        }, removeTime);
    }

    resetForm() {
        this.form.reset();
        
        // ÈáçÁΩÆÊñá‰ª∂‰∏ä‰º†Ê†áÁ≠æ
        const uploadLabel = this.form.querySelector('.upload-label span');
        if (uploadLabel) {
            uploadLabel.textContent = 'Upload Photo (Optional)';
        }
    }
}

// Êñá‰ª∂‰∏ä‰º†È¢ÑËßàÂäüËÉΩ
function initFileUpload() {
    const fileInput = document.querySelector('#photo-upload');
    const uploadLabel = document.querySelector('.upload-label span');

    if (fileInput && uploadLabel) {
        fileInput.addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                // È™åËØÅÊñá‰ª∂Á±ªÂûã
                if (!file.type.startsWith('image/')) {
                    alert('Please select an image file!');
                    this.value = '';
                    uploadLabel.textContent = 'Upload Photo (Optional)';
                    return;
                }

                // È™åËØÅÊñá‰ª∂Â§ßÂ∞è (5MB)
                if (file.size > 5 * 1024 * 1024) {
                    alert('File size must be less than 5MB!');
                    this.value = '';
                    uploadLabel.textContent = 'Upload Photo (Optional)';
                    return;
                }

                uploadLabel.textContent = `Selected: ${file.name}`;
                console.log('üì∑ File selected:', file.name, 'Size:', (file.size / 1024 / 1024).toFixed(2) + 'MB');
            } else {
                uploadLabel.textContent = 'Upload Photo (Optional)';
            }
        });
    }
}

// Ê∑ªÂä†CSSÂä®Áîª
const animationCSS = `
    @keyframes slideInRight {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    @keyframes slideOutRight {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }

    .share-button:disabled {
        cursor: not-allowed !important;
    }

    .upload-label {
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .upload-label:hover {
        background-color: #f3f4f6;
    }
`;

// Ê∑ªÂä†Ê†∑ÂºèÂà∞È°µÈù¢
const style = document.createElement('style');
style.textContent = animationCSS;
document.head.appendChild(style);

// ÂØºÂá∫Á±ª‰ª•‰æøÂú®main.js‰∏≠‰ΩøÁî®
export { RecipeSubmission, initFileUpload };